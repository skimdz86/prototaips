<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="home.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        R0lGODlhoADFAPcAAP///wB7AAD/AP9KAP97ABBKSoQQSkoQSgDOAIRzSkpzSoQxGUoxGYTvGUrvGYRS
        SkpSSoTOGUrOGXOlSjqlGYRzEOal7+ZC7+alnOZCnLWl77VC77WlnLVCnOZz7+YQ7+ZznOYQnLVz77UQ
        77VznLUQnOalxeZCxealc+ZCc7WlxbVCxbWlc7VCc+ZzxeYQxeZzc+YQc7VzxbUQxbVzc7UQc7VCQrUQ
        QrVCELUQEBCcMUJzEIzmpTrmpWPmpRDmpYzmezrme2PmexDme4zmzjrmzmPmzhDmzubvzoTvSubvWoQx
        SkoxSkrvSubvlIylELXvzrXvWrXvlIRSEEpSEObOzoTOSubOWkrOSubOlLXOzrXOWrXOlDqlShAIGYxj
        7zpj74yl7zql785zEGNj7xBj72Ol7xCl761zEACtABDOMZSlSlqlGc6lEBBzShDvStZCQs6lQtYQQs5z
        QtZCENYQEBCcUhBzGRDvGbXe962lEK2lQq1zQhAIShBKCIzm7zrm72Pm7xDm73MQGToQGQDmAHOlEFql
        ShApGYwQpToQpWMQpRAQpYwQezoQe2MQexAQe4wQzjoQzmMQzhAQzube9xDOUhmcCACUABApShBKKZQQ
        GVoQGRnOCIxzpTpzpYwxpToxpYy1pTq1pWMxpRAxpWNzpRBzpWO1pRC1pYwxezoxe2MxexAxe4xzezpz
        e4y1ezq1e2NzexBze2O1exC1e4wQ7zoQ72MQ7xAQ74xzzjpzzoy1zjq1zmNzzhBzzmO1zhC1zowxzjox
        zmMxzhAxzoxSpTpSpYyUpTqUpWNSpRBSpWOUpRCUpYxSezpSe4yUezqUe2NSexBSe2OUexCUe4xSzjpS
        zoyUzjqUzmNSzhBSzmOUzhCUzvdSMe+MEO+tQubvKbXvKe+tEObOKbXOKe9rGe+MQubvCLXvCObOCLXO
        CP9rAPcQQvcQEIwx7zox7+9rSmMx7xAx7/9SAPcxQvcxEACEABlzAO9zAP/e9xnvAO9SAP//7wBrAAAA
        ACH5BAEAAP8ALAAAAACgAMUAAAj/AP8JHEiwoMGDCBMqXMiwocOHECNKnEixosWLGDNq3Mixo8ePIEOK
        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
</value>
  </data>
</root>